[
    {
        "CONTENT": " <div class=\"container clearfix\"> <div class=\"col1-3 white\"> <h2><img src=\"images\/Vinegar_Small.png\"><\/img> Vinegar.js<\/h2> <div class=\"badge_div\"><p class=\"badge_text\">A Simple Robust<\/p> <p class=\"badge_js\">Javascript<\/p><p class=\"badge_te\">&lt;{Template}&gt; Engine<\/p></div> <div class=\"grey-area clearfix\"> <h3>Documentation</h3> <\/div> <div class=\"col1-3 tab-tile element home\"> <div class=\"tabs\"><a href=\"#Introduction\" class=\"clearfix\"> <div class=\"icons file\"><\/div> <span>Introduction<\/span><\/a><\/div> <div class=\"tabs\"><a href=\"#Getting_Started\" class=\"clearfix\"> <div class=\"icons aside\"><\/div> <span>Getting Started<\/span><\/a><\/div> <div class=\"tabs\"><a href=\"#Functions\" class=\"clearfix\"> <div class=\"icons heart\"><\/div> <span>Functions<\/span><\/a><\/div>  <div class=\"tabs\"><a href=\"examples.html\" class=\"clearfix\"> <div class=\"icons github\"><\/div> <span>Examples<\/span><\/a><\/div> <\/div> <\/div> <div class=\"col3-3 home element\"> <div class=\"images\"> <img src=\"images\/post01.png\" alt=\"\"\/><div class=\"caption banner_caption\"><br /><div class=clear><\/div><p>Vinegar.JS - A Simple Robust Javascript Template Engine</p><\/div> <div class=\"banner\"><h1 class=\"banner_text\">Documentation<\/h1></div><\/div> <div class=white-bottom> <a name=\"Introduction\"></a> <h2> <div class=\"icons file\"><\/div> Introduction<\/h2> <p class=big> This documentation will help educate you in the application of Vinegar.JS in your own projects. Vinegar.JS is a template engine written entirely in Javascript. The purpose of which is to provide a client-side or server-side template environment. <\/p> <p>Speed & Functionality are at the core of Vinegar.JS. It is anamorphic meaning you can replace the delimiter tags with your own. But first a little about delimiter tags.<br \/><br \/>Delimiter: [dih-lim-i-ter] noun<\/p> <ol class=ordered-list> <li>a blank space, comma, or other character or symbol that indicates the beginning or end of a character string, word, or data item. <\/li> <\/ol> <p>Vinegar.JS tags using the default delimiter settings look like this ( &lt;{REPLACEMENT_NAME}&gt; ) where the opening delimiter is &lt;{ the replacement key is REPLACEMENT_NAME and the closing delimiter is }&gt;.<\/p> <br \/><br \/> <hr \/> <br /> <a name=\"Getting_Started\"></a> <h2> <div class=\"icons file\"><\/div> Getting Started<\/h2> <p class=big>The easiest way to get started is to download a copy of the github repo here. Extract the copy to your desktop and open the examples.html file in the examples folder in your web browser.</p> <p>NOTE: The ajax example will only function properly in an environment that sends ajax response headers such as a web server.</p> <p>Now that you have seen the example.html file in your browser open it up in your favorite text editor. Within the file you will notice a JSON template for key and value pairs. These key values replace &lt;{key}&gt; with the value specified in the JSON template. That is the basis of how a replacement key and variable may be used within a template for use with Vinigar.JS.</p> <p>Vinegar.JS objects may also overwrite object children in a global higharchy based scope. This is called nesting. Nested data may also contain a key and value replacement so dynamic higharchy based nesting is possible. For an example please refer to the nesting.html file within the examples folder.</p> <p>Vinegar.JS may also parse Javascript Object data to display content within a loop. Loopable templates to itterate over object data are expressed as an encapsulated pair of Vinegar.JS Objects as follows: &lt;{#key}&gt; &lt;{value}&gt; &lt;{\/key}&gt; combination.</p> <p>You now know the basics. You can dive right in and start building based on the examples provided or you may dive into the Function reference in the next section to learn more. The Vinegar.JS website is also provided at the following repository <strike><a href=\"#soon\">LINK</a><\/strike> which provides an in depth example to create this fully functional website.<\/p> <br \/><br \/> <hr \/> <br \/> <a name=\"Functions\"></a> <h2> <div class=\"icons file\"><\/div> Functions<\/h2> <p class=big>VARIABLES</p> <div class=\"grey-area col1-3\"> <h4>node<\/h4> <p class=\"small below-h3 clearfix\"><span class=alignleft>@NULL | @PROCESS<\/span><span class=alignright><a href=\"#\">OBJECT<\/a><\/span><\/p> <p class=\"comments\">This variable returns a node.js object (when running wihin node) or null (when running in a browser). <\/p> <\/div> <div class=\"grey-area col1-3\"> <h4>this<\/h4> <p class=\"small below-h3 clearfix\"><span class=alignleft>@Vinegar<\/span><span class=alignright><a href=\"#\">OBJECT<\/a><\/span><\/p> <p class=\"comments\">This variable returns the object of Vinegar itself within a global context. <\/p> <\/div> <div class=\"grey-area col1-3 clearfix\"> <h4>CH3<\/h4> <p class=\"small below-h3 clearfix\"><span class=alignleft>@OPEN_DELIMITER<\/span><span class=alignright><a href=\"#\">STRING<\/a><\/span><\/p> <p class=\"comments\">This variable returns a string representing the opening delimiter for Vinegar.JS. <\/p> <\/div> <div class=\"grey-area col1-3 clearfix\"> <h4>CH3enc<\/h4> <p class=\"small below-h3 clearfix\"><span class=alignleft>@SERIALIZED_OPEN_DELIMITER<\/span><span class=alignright><a href=\"#\">STRING<\/a><\/span><\/p> <p class=\"comments\">This variable returns a string representing the opening delmiter serialized. <\/p> <\/div> <div class=\"grey-area col1-3 clearfix\"> <h4>COOH<\/h4> <p class=\"small below-h3 clearfix\"><span class=alignleft>@CLOSE_DELIMITER<\/span><span class=alignright><a href=\"#\">STRING<\/a><\/span><\/p> <p class=\"comments\">This variable returns a string representing the closing delimiter for Vinegar.JS. <\/p> <\/div>  <div class=\"grey-area col1-3 clearfix\"> <h4>COOHenc<\/h4> <p class=\"small below-h3 clearfix\"><span class=alignleft>@SERIALIZED_CLOSE_DELIMITER<\/span><span class=alignright><a href=\"#\">STRING<\/a><\/span><\/p> <p class=\"comments\">This variable returns a string representing the closing delimiter serialized. <\/p> <\/div> <p class=big>FUNCTIONS</p>  <br \/><br \/> <div class=\"grey-block\"> <h3>DELIMITER(STRING a, STRING b) {..}<\/h3> <p class=\"small below-h3 clearfix\"><span class=alignleft>@NULL<\/span><span class=alignright><a href=\"#\">FUNCTION<\/a><\/span><\/p> <p class=\"comments\"><strong>a<\/strong> - opening delimiter string<br /><strong>b<\/strong> - closing delimiter string</strong> <br /><br /> <h4>Description</h4> Use this function to define your own delimiter.<\/p> <h4>Example</h4>Vinegar.delimiter(\"&lt;%\",\"%&gt;\"); \/\/ Sets the delimiter to ERB styled syntax <\/div> <br \/> <div class=\"grey-block\"> <h3>TEMPLATE(OBJECT obj, JSON datajson) {..}<\/h3> <p class=\"small below-h3 clearfix\"><span class=alignleft>@NULL<\/span><span class=alignright><a href=\"#\">FUNCTION<\/a><\/span><\/p> <p class=\"comments\"><strong>templateuri<\/strong> - location of the template file with relative path<br /><strong>datajson<\/strong> - json array of data to pass to the template</strong> <br /> <br /> <h4>Description</h4> The template function provides the core functionality of the Vinegar.JS template engine. You may pass a document object or variable object along with a data json string representing your template variable keys and values.<\/p> <h4>Example</h4>Vinegar.template(document.body,[{\"VINEGAR\":\"IS COOL\"}]); \/\/ Vinegar.JS Heavy Lifter <\/div>  <br \/> <div class=\"grey-block\"> <h3>FERMENT(OBJECT obj, JSON templatedata, JSON datajson) {..}<\/h3> <p class=\"small below-h3 clearfix\"><span class=alignleft>@JSON<\/span><span class=alignright><a href=\"#\">FUNCTION<\/a><\/span><\/p> <p class=\"comments\"><strong>obj<\/strong> - the fermented object<br /><strong>templatedata<\/strong> - the template data<br /><strong>datajson<\/strong> - array of data to pass to the template</p> <br /> <br /> <h4>Description</h4> The ferment function begins our metabolic process in which the template data is passed to be metabolized.<\/p> <h4>Example</h4> Vinegar.ferment(obj,temlatedata,datajson); \/\/ Our metabolic process. <\/div>  <br \/> <div class=\"grey-block\"> <h3>METABOLIZE(OBJECT obje, JSON templatedata, JSON datajson) {..}<\/h3> <p class=\"small below-h3 clearfix\"><span class=alignleft>@TRANSPOSED TEMPLATE DATA<\/span><span class=alignright><a href=\"#\">FUNCTION<\/a><\/span><\/p> <p class=\"comments\"><strong>obje<\/strong> - the fermented object<br /><strong>templatedata<\/strong> - the template data<br /><strong>datajson<\/strong> - array of data to pass to the template</p> <br /> <br /> <h4>Description</h4> The metabolize function is the heart of Vinegar.JS. This process handles the itteration and replacement of Vinegar.JS data objects. This process is autonomous and does not need to be called manually.<\/p> <h4>Example</h4> templatedata = this.metabolize(obje, templatedata, [obj[key]]); \/\/ Metabolize. <\/div> <br \/> <div class=\"grey-block\"> <h3>ETHANOL(OBJECT obje, JSON templatedata) {..}<\/h3> <p class=\"small below-h3 clearfix\"><span class=alignleft>@TEMPLATE DATA<\/span><span class=alignright><a href=\"#\">FUNCTION<\/a><\/span><\/p> <p class=\"comments\"><strong>obj<\/strong> - the fermented object<br /><strong>templatedata<\/strong> - the template data</p> <br /> <br /> <h4>Description</h4> The Ethanol function mixes templatedata and object data together from our metabolic process. As a result the output of the template data and json data are pushed to the passed object as well as returned via the function call.<\/p> <h4>Example</h4> templatedata = this.ethanol(obje,templatedata); \/\/ Mix the object and template data. <\/div> <br \/>  <br \/> <div class=\"grey-block\"> <h3>BOND(STRING text, REGEX replace, STRING with_this) {..}<\/h3> <p class=\"small below-h3 clearfix\"><span class=alignleft>@STRING<\/span><span class=alignright><a href=\"#\">FUNCTION<\/a><\/span><\/p> <p class=\"comments\"><strong>text<\/strong> - the text string<br /><strong>replace<\/strong> - the string to replace<br /><strong>with_this<\/strong> - the replacement string</p> <br /> <h4>Description</h4> The Bond function replaces string data with the replacement text defined. This is an autonomous function and does not need to be called.<\/p> <h4>Example</h4> templatedata = this.bond(templatedata, this.CH3enc+key+this.COOHenc, first); \/\/ Bond the template data. <\/div> <br /><div class=\"grey-block\"> <h3>PAIR(STRING templatedata, STRING key, STRING first) {..}<\/h3> <p class=\"small below-h3 clearfix\"><span class=alignleft>@STRING<\/span><span class=alignright><a href=\"#\">FUNCTION<\/a><\/span><\/p> <p class=\"comments\"><strong>templatedata<\/strong> - the template data<br /><strong>key<\/strong> - the pair key<br /><strong>first<\/strong> - the value of the first key to replace</p> <br /> <br /> <h4>Description</h4> The pair function combines template data via bond. This is an autonomous function and does not need to be called.<\/p> <h4>Example</h4> templatedata = this.pair(templatedata, key, first); \/\/ Pair data to the template. <\/div>  <br \/><br \/> <hr \/> <br \/> <h2> <div class=\"icons file\"><\/div> Examples<\/h2> <p>Vinegar.JS ships with an examples folder however we have made these examples available online.<br /><br />You can find the examples on the <a href=\"examples.html\">Examples page</a>.<\/p> <\/div> <\/div>"
	}
]